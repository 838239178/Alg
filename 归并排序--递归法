#include <bits/stdc++.h>
using namespace std;

void MergeSort(int* begin, int* end);
void MergeCombine(int* arr1, int len1, int* arr2, int len2);

int main()
{
	int n;
	cin >> n;
	int* a = new int [n];
	for (int i = 0; i < n; i++) cin >> a[i];
	MergeSort(&a[0], &a[n - 1]);
	for (int i = 0; i < n; i++) cout << a[i];
	delete[]a;
	return 0;
}
/*递归不断二分数组*/
void MergeSort(int* begin, int* end)
{
	if (begin == end) return;
	int* mid = begin + (end-begin) / 2;
	int len1 = mid - begin + 1;
	int len2 = end - mid;
	MergeSort(begin, mid);
	MergeSort(mid+1, end);
	MergeCombine(begin, len1, mid + 1, len2);
}
/*合并两个有序数组*/
void MergeCombine(int* arr1, int len1, int* arr2, int len2)
{
	int* temp = new int[len1 + len2];
	int* p1 = arr1;                                       //保存arr1首地址
	int* p2 = arr2;										  //保存arr2首地址
	int* Th = temp;                                       //保存temp首地址
	/*有序数组的合并--边比较边插入*/
	while (arr1 < p1 + len1 && arr2 < p2 + len2) {
		if (*arr1 <= *arr2)
			*(temp++) = *(arr1++);
		else
			*(temp++) = *(arr2++);
	}
	/*把剩下的接到temp后面*/
	if (arr1 == p1 + len1)
		while (arr2 < p2 + len2) *(temp++) = *(arr2++);
	else
		while (arr1 < p1 + len1) *(temp++) = *(arr1++);
	/*覆盖原数据*/
	for (int i = 0; i < len1 + len2; i++) p1[i]=Th[i];
	
	delete[]Th; 
}

#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <list>
#include <iomanip>
#include <algorithm>
using namespace std;

void QuickSort_stack(int* a, int i, int j);
void QuickSort(int* a, int i, int j);
int Pritation(int* a, int i, int j);

int main()
{
	int n;
	cin >> n;
	int* ans = new int[n];
	for (int i = 0; i < n; i++) cin >> ans[i];
	QuickSort(ans, 0, n - 1);
	for (int i = 0; i < n; i++) cout << ans[i];
	cout << endl;
	for (int i = 0; i < n; i++) cin >> ans[i];
	QuickSort_stack(ans, 0, n - 1);
	for (int i = 0; i < n; i++) cout << ans[i];
	delete[]ans;
	return 0;
}
int Pritation(int* a, int left, int right)
{
	int std = a[left];							//定义标准值为区间第一个
	while (left < right) {
		while (right > left) {                      //把std右边比std小的数复制到左边
			if (std > a[right]) {
				a[left] = a[right];
				break;
			}
			right--;
		}
		while (left < right) {					  //把std左边比std大的数复制到右边
			if (std < a[left]) {
				a[right] = a[left];
				break;
			}
			left++;
		}
	}
	a[left] = std;                                //把最后的位置（中间i==j) 设为std
	return left;									//返回中间的位置 left==right==mid
}
void QuickSort(int* a, int l, int r)
{
	int mid = Pritation(a, l, r);
	if (l >= r)return;
	QuickSort(a, l, mid - 1);                   //排序左半区间
	QuickSort(a, mid + 1, r);                   //排序右半区间
}
/*
堆栈法原理：
把每一轮的指针顺序放到堆栈，
堆栈的top会一直是每轮的左区间
直到左边的区间为1时，堆栈的top变成每一轮的右区间
开始排序每轮的右半边
*/
void QuickSort_stack(int* a, int l, int r)
{
	stack<int> p;
	int ltemp, rtemp;
	//压栈-先左后右
	p.push(l);
	p.push(r);
	while (!p.empty()) {
		//出栈-先右后左
		rtemp = p.top();
		p.pop();
		ltemp = p.top();
		p.pop();
		int mid = Pritation(a, ltemp, rtemp);
		/*保存指针位置-压栈-右区间后左区间*/
		//右区间(先进左指针）
		if (mid < rtemp) {
			p.push(mid + 1);
			p.push(rtemp);
		}
		//左区间(先进左指针）
		if (mid > ltemp) {
			p.push(ltemp);
			p.push(mid - 1);
		}
	}
}
